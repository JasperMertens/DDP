.text

.global add_c
.func add_c, add_c
.type add_c, %function

add_c:
cmp r2, #0					// while c!=0
beq end_add_c
add r0, r0, r1, lsl #2		// *t + 4*i

ldr r3, [r0]	 			// r3 <= t[i]
adds r1, r3, r2
str r1, [r0], #4			// store r1 to memory adress of r0, increase pointer to memory address by 4
bcc end_add_c

add_c_loop:					// propagate carry
ldr r3, [r0]				// r3 <= t[i]
adds r1, r3, #1
str r1, [r0], #4
bcs add_c_loop

end_add_c:
bx lr
.endfunc


.text

.global sum
.func sum, sum
.type sum, %function

sum:
push {r4-r7}
ldr r4, [sp, #32]
ldr r5, [sp, #36]
ldr r6, [sp, #40]
ldr r7, [sp, #44]

add r2,r2,r7, lsl #2	//*t + 4j
add r3,r3,r7, lsl #2	//*a + 4j
add r4,r4,r6, lsl #2	//*b + 4i

ldr r2, [r2]
ldr r3, [r3]
ldr r4, [r4]

umull r1,r0,r3,r4
adds r2,r2,r5
addcs r0,r0, #1
adds r1, r1, r2
addcs r0, r0, #1
pop {r4-r7}

bx lr
.endfunc

