.global inner_loop
.func inner_loop, inner_loop
.type inner_loop, %function

inner_loop:

push {r4-r12,r14}

ldr r4, [sp, #40] //36]
ldr r5, [sp, #44]
ldr r6, [sp, #48]
ldr r7, [sp, #52]
ldr r8, [sp, #56]

add r2,r2,r8, lsl #2	// *t[0+j*4]
add r3,r3,r8, lsl #2	// *a[0+j*4]		
add r4,r4,r7, lsl #2	// *b[0+i*4]
add r6,r6,r8, lsl #2	// *n[0+j*4]

ldr r11, [r4]		// r11: b[i], r4: *b[i]

mov r0, r4		// r4:  *C
ldr r0, [r4]		// r0:  C
mov r1, r14		// r14: *S
ldr r1, [r14]		// r1:  S 

//LOOP nog schrijven

ldr r9,  [r2] ,#4	// r9:  t[j], r2: *t[j+1]
ldr r10, [r3]		// r10: a[j], r3: *a[j]
ldr r12, [r6]		// r12: n[j], r6: *n[j]

//mult_c

umull r10,r11,r10,r11	// r11,r10: a[j]*b[i] (MSB, LSB)
adds r9,r9,r0		// r9:  t[j] + C (onthoud carry), r0: C
addcs r11,r11, #1	// r11: MSBs + carry
adds r1,r10,r9		// r1:  LSBs + t[j] + C (onthoud carry), r10: LSBs, r9: t[j] + C
addcs r11,r11,#1	// r11: MSBs + carry
mov r0,r11		// r0:  MSBs + carrys

//add_c

cmp r0,#0		
beq end_add_c		// jump to end if C = 0

ldr r9,[r2]		// r9: t[j+1], r2: *t[j+1]	
adds r1,r9,r0		// r1: t[j+1] + C, r9: t[j+1], r0: C
str r1, [r2]		// r2: *t[l+1] (= t[j+1] + C = S),   			

bcc end_add_c		// jump to end if carry is zero (C = 0)

ldr r11, r2 #-8		// save adress *t[j-1] to r11

add_c_loop:

ldr r1,[r2]		// r1: t[j+1] (or higher, depending on the increment of *t)
adds r1,r1,#1		// r1: t[j+1] + 1
str r1,[r2],#4

bcs add_c_loop 

end_add_c:

umull r5,r12,r5,r12	// r5,r12:  C,S = m*n[j] 
adds r1,r1,r5		// r1:      S = S + LSB
addcs r12,r12,#1	// r12:     C = C + carry

str r1, [r11]		// r11: *t[j-1], t[j-1] = S

str r1, [r14]		// r1:  *S, S = S  (redundant/)
str r12, [r4]		// r4: 


bx lr
.endfunc









