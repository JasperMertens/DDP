#include <stdio.h>
#include <stdlib.h>

#include "xil_printf.h"
#include "xil_cache.h"

#include "platform/platform.h"
#include "platform/performance_counters.h"

#include "interface.h"
#include "sw.h"
#include "hw.h"

// These variables are defined and assigned in testvector.c
extern uint32_t M[32],
                N[32],       N_prime[32],
                e[32],
                e_len,
                p[16],       q[16],
                d_p[16],     d_q[16],
                d_p_len[16], d_q_len[16],
                x_p[32],     x_q[32],
                R2p[16],     R2q[16],
                R_1024[32],  R2_1024[32],
                One[32];


// Note that these tree CMDs are same as
// they are defined in montgomery_wrapper.v
#define CMD_READ    0
#define CMD_COMPUTE 1
#define CMD_WRITE   2

void test_mont_mult();
void test_mont_exp();
void printMontExpResult();

uint32_t result[64] = {0};
uint32_t size = 32;

uint32_t a[32] = {0x4b0afbba, 0xb3270d27, 0xfef81247, 0x9c028fde, 0x873a8d9d, 0x74150080, 0x21c3a9a5, 0x04b6f5a7, 0x465ab66a, 0xf0af88c6, 0x4210ad08,
		0x3178b33b, 0x520fa2fe, 0xfabbcfe3, 0x51a66eb0, 0x1c1a6807, 0x57dc7837, 0x651c9e46, 0x21c0b44a, 0xaba36ace, 0x82f4820e, 0xf6a0e49f, 0xf489dab2,
		0x93df7bae, 0x74203419, 0xbd13b6fd, 0x4135e9f9, 0x046d1052, 0xc0a7108c, 0x191a0cc0, 0x607fc341, 0x2c261c9b};
uint32_t b[32] = {0xf1d2b3e2, 0x925c0577, 0x825c7977, 0x0cc1e17c, 0x179e2466, 0x0abf48a4, 0x839b99e3, 0x7b52c351, 0xc643edb7, 0x51c28d81, 0xdb0242ba,
		0x87069825, 0xb4e0aae5, 0x87b90b9b, 0x8026f877, 0xfd3b0911, 0x67498835, 0x9e56065e, 0x634a379e, 0xc2281d7e, 0x7793f6b9, 0x4a15cd7c, 0xd5d7c345,
		0xdf354cd4, 0x5dfdb200, 0x2a7f0547, 0x88da4e10, 0xedf5af44, 0x2982780e, 0x8ac21ffd, 0xb5118fec, 0x63a68886};
uint32_t n[32] = {0x575bb461, 0x1a3042d4, 0x95d708c1, 0x9a02f06b, 0x7582491e, 0x947f45f7, 0x6b785070, 0xa35e54c5, 0xba07c851, 0x29fb66a2, 0xd893feb0,
		0xa2ebe291, 0x08a64bd1, 0x5ab21338, 0xb451c21d, 0x330e7700, 0xa812c547, 0x633354b3, 0x9439c77f, 0x7de168b7, 0xd199da8f, 0x44fdd142, 0x8ce3e7f1,
		0xb807a6ae, 0x5173de8c, 0xe2fe1c98, 0x4d51689c, 0x5cfa7887, 0x54f0f9b9, 0x4b71a0e2, 0xbae33525, 0xb5d738a0};
uint32_t n0[32] = {0x16f2105f, 0xfdddd2ad, 0x95f75ac0, 0xa8c30990, 0xf655e370, 0x8720517c, 0x886839eb, 0xabeb253b, 0xdb6a3b3a, 0x6bf8258a, 0x3a62d68d,
		0x6a346d25, 0x208996eb, 0x217db098, 0xa2f73e93, 0x24b76402, 0xcd4545e4, 0x97a3727b, 0x7ab207b7, 0x913832ef, 0x9996349c, 0xda3718a1, 0xab631b76,
		0x694a7470, 0x93cb8bfa, 0x408f5cc3, 0xd34ef659, 0x57aa7bc7, 0xa1a8404b, 0x6730f4f7, 0xbb489ebf, 0x401b0f1d};


int main()
{
    int i;

    init_platform();
    init_performance_counters(1);
    interface_init();

    xil_printf("Startup..\n\r");

    START_TIMING

	// test_dma_transfer();

	test_mont_mult();

//    test_mont_exp();

	xil_printf("\n\r");

    printMontExpResult(size);

	xil_printf("\n\r");

    STOP_TIMING

    ////////////// Test the port-based communication //////////////

	//// --- Create and initialize src array

#if NUMBER_OF_CORES == 1
	// If NUMBER_OF_CORES == 1
	// then all 16 words defined below will be used to communicate with Core 1

	unsigned int src[DMA_TRANSFER_NUMBER_OF_WORDS]={
		0x00000000, 0x00000000, 0x01234567, 0x89abcdef,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000};
#else
    // If NUMBER_OF_CORES == 2
    // then 32 words will be defined,
    //      the words  0 to 15 will be used to communicate with Core 1
    //      the words 16 to 31 will be used to communicate with Core 2

    unsigned int src[DMA_TRANSFER_NUMBER_OF_WORDS]={
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x76543210, 0xfedcba98, 0x00000000, 0x00000000,

		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x89abcdef, 0x01234567, 0x00000000, 0x00000000};

    // If you need, you can use the src1 and src2 pointers 
    // to access the src array defined above as two individual arrays.
    // src1 for the lower  16-words of the src array and
    // src2 for the higher 16-words
    unsigned int* src1 = src;
    unsigned int* src2 = src+16;
#endif
    //// --- Perform the send operation

    // Start by writing CMD_READ to port1 (command port)
    xil_printf("PORT1=%x\n\r",CMD_READ);
    my_montgomery_port[0] = CMD_READ;

    // Transfer the src array to BRAM
    bram_dma_transfer(dma_config,src,DMA_TRANSFER_NUMBER_OF_WORDS);

    // Wait for done of CMD_READ is done
    // by waiting for port2 (acknowledgement port)
    port2_wait_for_done();


    //// --- Print BRAM contents

    // For checking if send is successful
    print_bram_contents();


    //// --- Perform the compute operation

    // Start by writing CMD_COMPUTE to port1 (command port)
    xil_printf("PORT1=%x\n\r",CMD_COMPUTE);
    my_montgomery_port[0] = CMD_COMPUTE;

    // Wait for done of CMD_COMPUTE is done
	// by waiting for port2 (aknowledgement port)
    port2_wait_for_done();


    //// --- Perform the read operation

    // Start by writing CMD_WRITE to port1 (command port)
    xil_printf("PORT1=%x\n\r",CMD_WRITE);
    my_montgomery_port[0] = CMD_WRITE;

    // Wait for done of CMD_WRITE is done
    port2_wait_for_done(); //Wait until Port2=1


    //// --- Print BRAM contents

    // For receiving the read output of the computation
    print_bram_contents();

    cleanup_platform();

    return 0;
}

void test_mont_mult() {

	montgomery_multiply(a, b, n, n0, result, 32);

	xil_printf("\n\r");

}

void test_mont_exp() {

	mod_exp(M, e, e_len, N, N_prime, result);

	xil_printf("\n\r");

}

void printMontExpResult(uint32_t size)
{
	int i;
	if (result[size-1] != 0) {
		xil_printf("Result:0x%x", result[size-1]);
	} else {
		xil_printf("Result: 0x");
	}
	for (i=size-2; i>=0; i--) {
		xil_printf("%08x", result[i]);
	}
	xil_printf("\n\r");
}
