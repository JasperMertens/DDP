#include "hw.h"
#include "sw.h"
#include "interface.h"

#include <stdint.h>

// These variables are defined and assigned in testvector.c
extern uint32_t M[32],
                N[32],       N_prime[32],
                e[32],
                e_len,
                p[16],       q[16],
                d_p[16],     d_q[16],
                d_p_len[16], d_q_len[16],
                x_p[32],     x_q[32],
                R2p[16],     R2q[16],
                R_1024[32],  R2_1024[32],
                One[32];
#define SIZEA 32

#define CMD_READ_A           0x0;
#define CMD_READ_B           0x1;
#define CMD_READ_M           0x2;
#define CMD_COMPUTE          0x3;
#define CMD_WRITE            0x4;


void reduce_cipher(unsigned int *cipher) {
	unsigned int Cp[SIZEA];
	unsigned int Cq[SIZEA];

	hw_montgomery_multiply(cipher, (unsigned int *) One, (unsigned int *) N, (unsigned int *) N_prime, Cp, SIZEA);
	hw_montgomery_multiply(cipher, (unsigned int *) One, (unsigned int *) N, (unsigned int *) N_prime, Cq, SIZEA);
}


void hw_mod_exp(uint32_t *msg, uint32_t *exp, uint32_t exp_len, uint32_t *n, uint32_t *n_prime, uint32_t *res) {
	int i;
	int bit;

	uint32_t x_tilde[32];
	uint32_t A[32] = {0};
	//uint32_t *A = res;

	// Calculate x_tilde = MontMul(x, R^2 mod m)
	//   R2_1024 is defined in global.h
	hw_montgomery_multiply(msg, R2_1024, n, n_prime, x_tilde, SIZEA);
	//printMontResult(x_tilde, 32);

	// Copy R to A
	//   R_1024 is defined in global.h
	for(i = 0; i < 32; i++)
	    A[i] = R_1024[i];

	while(exp_len>0)
	{
		exp_len--;

		bit = (exp[exp_len/32] >> (exp_len%32)) & 1;


		// Calculate A = MontMul(A, A)
		hw_montgomery_multiply(A, A, n, n_prime, A, SIZEA);

		if(bit)
		{
			// Calculate A = MontMul(A, x_tilde)
			hw_montgomery_multiply(A, x_tilde, n, n_prime, A, SIZEA);
		}
	}

	// Calculate A = MontMul(A, 1)
	//   One is defined in global.h
	hw_montgomery_multiply(A, One, n, n_prime, A, SIZEA);

	// Return A
	for (i=0; i<SIZEA; i++) {
		res[i] = A[i];
	}
}


void hw_montgomery_multiply(unsigned int  *a, unsigned int  *b, unsigned int  *n, unsigned int  *n0, unsigned int  *res, unsigned int SIZE) {
	bram_dma_transfer(dma_config,a,SIZE);
	my_montgomery_port[0] = CMD_READ_A;
	port2_wait_for_done();

	bram_dma_transfer(dma_config,b,SIZE);
	my_montgomery_port[0] = CMD_READ_B;
	port2_wait_for_done();

	bram_dma_transfer(dma_config,n,SIZE);
	my_montgomery_port[0] = CMD_READ_M;
	port2_wait_for_done();

	my_montgomery_port[0] = CMD_COMPUTE;
	port2_wait_for_done();

	my_montgomery_port[0] = CMD_WRITE;
	port2_wait_for_done();

	copy_bram_to(res, SIZE);
}

void copy_bram_to(unsigned int *result, unsigned int SIZE) {
	int i;
	for (i=0; i<SIZE; i++) {
		result[i] = my_montgomery_data[i];
	}
}

