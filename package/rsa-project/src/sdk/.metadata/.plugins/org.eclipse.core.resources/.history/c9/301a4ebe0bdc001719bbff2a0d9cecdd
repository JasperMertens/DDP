#include <stdint.h>

#include "xil_printf.h"

#include "sw.h"

// These variables are defined and assigned in testvector.c
extern uint32_t M[32],
                N[32],       N_prime[32],
                e[32],
                e_len,
                p[16],       q[16],
                d_p[16],     d_q[16],
                d_p_len[16], d_q_len[16],
                x_p[32],     x_q[32],
                R2p[16],     R2q[16],
                R_1024[32],  R2_1024[32],
                One[32];

#include "asm_add.h"
#include "inner_loop3.h"

void sub_cond(uint32_t *t, uint32_t *n, uint32_t *p);

#define SIZEA 32

// Calculates res = (x^exp) mod N
void mod_exp(uint32_t *msg, uint32_t *exp, uint32_t exp_len, uint32_t *n, uint32_t *n_prime, uint32_t *res) {
	int i;
	int bit;

	uint32_t x_tilde[32];
	uint32_t A[32] = {0};
	uint32_t *A = res;

	// Calculate x_tilde = MontMul(x, R^2 mod m)
	//   R2_1024 is defined in global.h
	montgomery_multiply(msg, R2_1024, n, n_prime, x_tilde, SIZEA);

	// Copy R to A
	//   R_1024 is defined in global.h
	for(i = 0; i < 32; i++)
	    A[i] = R_1024[i];

	while(exp_len>0)
	{
		exp_len--;

		bit = (exp[exp_len/32] >> (exp_len%32)) & 1;

		xil_printf("Bit[%d] of exponent is: %d\n\r", exp_len, bit);

		// Calculate A = MontMul(A, A)
		montgomery_multiply(A, A, n, n_prime, A, SIZEA);

		if(bit)
		{
			// Calculate A = MontMul(A, x_tilde)
			montgomery_multiply(A, x_tilde, n, n_prime, A, SIZEA);
		}
	}

	// Calculate A = MontMul(A, 1)
	//   One is defined in global.h
	montgomery_multiply(A, One, n, n_prime, A, SIZEA);

//	// Return A
//	for (i=0; i<SIZEA; i++) {
//		res[i] = A[i];
//	}
}


#define SIZE2 32

// Calculates res = (a * b / R) mod N where R = 2^1024
void montgomery_multiply(uint32_t *a, uint32_t *b, uint32_t *n, uint32_t *n0, uint32_t *res, uint32_t SIZE) {
	uint32_t t[SIZE2+2] = {0};
		uint32_t i;
		//uint64_t sum=0;
		uint32_t C=0;
		uint32_t S=0;
		uint32_t m=0;
		//i=1;
		for(i=0 ; i<SIZE ; i++) {
		asm_sum1(&C, &S, t, a, b, i);
		add_c(t,1,C);
		m = (uint32_t)(S*(*n0));
		asm_sum2(&C, S, n0, n);
		inner_loop3(&C, i, t, a, b, m, n);
		asm_end(C, t+SIZE);

		}
		sub_cond(t,n, res);
}


void sub_cond(uint32_t *u, uint32_t *n, uint32_t *p){
	uint32_t B = 0;
	uint32_t t[SIZE2] = {0};
	uint32_t sub = 0;
	uint32_t i;
	for(i=0 ; i<SIZE2 ; i++) {
		sub = u[i] - n[i] - B;
		if(u[i] >= n[i] + B){
			B = 0;
		} else {
			B = 1;
		}
		t[i] = sub;
	}
	if (u[SIZE2]==1) {
		B = 0;
	}
	if(B == 0){
		for (i=0; i<SIZE2; i++) {
			p[i] = t[i];
		}
	} else {
		for (i=0; i<SIZE2; i++) {
			p[i] = u[i];
		}
	}
}

void printMontResult(uint32_t *result, uint32_t size)
{
	int i;
	if (result[size-1] != 0) {
		xil_printf("Result:0x%x", result[size-1]);
	} else {
		xil_printf("Result: 0x");
	}
	for (i=size-2; i>=0; i--) {
		xil_printf("%08x", result[i]);
	}
	xil_printf("\n\r");
}


// Calculates res = (a + b) mod N.
// a and b represent operands, N is the modulus. They are large integers stored in uint32_t arrays of size elements
void mod_add(uint32_t *a, uint32_t *b, uint32_t *n, uint32_t *res, uint32_t size)
{
	uint32_t save = res[size];		// retain this data
	mp_add(a, b, res, size);		// this overrides data at res[size]
	if (res[size] == 1) {			// if the addition ended with a carry bit
						// then sum > N
		mp_sub(res, N, res, size);	// ==> result = sum-N
	} else {
		int i = size-1;
		while (i>0 && res[i] == N[i]) { // skip until the numbers differ
						// or the whole array but the final
						// element has been traversed
			i--;
		}
		if (res[i] >= N[i]) {		   // sum >= N
			mp_sub(res, N, res, size); // ==> result = sum-N
		}
	}
	res[size] = save;			// put the data back
}

// Calculates res = (a - b) mod N.
// a and b represent operands, N is the modulus. They are large integers stored in uint32_t arrays of size elements
void mod_sub(uint32_t *a, uint32_t *b, uint32_t *n, uint32_t *res, uint32_t size)
{
	uint32_t c = 0;
	uint64_t temp;
	int i;
	for(i=0; i<size; i++) {
		temp = (uint64_t)a[i] - (uint64_t)b[i] - (uint64_t)c;
		res[i] = (uint32_t)temp;
		c = temp >> 63; 		// c = 000...001 or 000...000
	}
	if (c == 1) {				// if the subtraction had a negative result
		uint32_t save = res[size];	// retain this data
		mp_add(res, N, res, size);	// ==> result = diff + N to make it positive
		res[size] = save;		// put the data back
	}


}

// Calculates res = a + b.
// a and b represent large integers stored in uint32_t arrays
// a and b are arrays of size elements, res has size+1 elements
void mp_add(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{
	uint32_t c = 0;
	uint64_t temp;
	int i;
	for(i=0; i<size; i++) {
		temp = (uint64_t)a[i] + (uint64_t)b[i] + (uint64_t)c;
		res[i] = (uint32_t)temp;
		c = temp >> 32;
	}
	res[size] = c;	// the memory at res[size]
}

// Calculates res = a - b.
// a and b represent large integers stored in uint32_t arrays
// a, b and res are arrays of size elements
void mp_sub(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{
	uint32_t c = 0;
	uint64_t temp;
	int i;
	for(i=0; i<size; i++) {
		temp = (uint64_t)a[i] - (uint64_t)b[i] - (uint64_t)c;
		res[i] = (uint32_t)temp;
		c = temp >> 63; // c = 000...001 or 000...000
	}
}

